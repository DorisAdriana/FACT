import torch
from models import BaseRecModel
import pickle

class CEF_module(torch.nn.Module):
    def __init__(self):
        super(CEF_module, self).__init__()
        self.device = 'cpu'
        dataset_path="models/Dataset_20.pickle"
        model_path="models/model_20.model"

        with open(dataset_path, "rb") as f:
            self.dataset = pickle.load(f)
        self.basemodel = BaseRecModel(self.dataset.feature_num, self.dataset).to(self.device)
        self.basemodel.load_state_dict(torch.load(model_path))
        self.basemodel.eval()
        
        self.delta = torch.randn(self.dataset.item_feature_matrix.shape[1])
        self.delta_param = torch.nn.Parameter(self.delta)

    def forward(self):
        user_feature = self.dataset.user_feature_matrix.copy()
        item_feature = self.dataset.item_feature_matrix.copy()

        user_feature[0,:] += self.delta_param
        with torch.no_grad():
            out = self.basemodel.forward(user_feature, item_feature)
            
        return out

def train_model():
    model = CEF_module()
    print(list(model.parameters()))

if __name__ == '__main__':
    train_model()
